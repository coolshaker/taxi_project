second_collision~alcohol+inattention+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
'
fit.day<-sem(model.day,data=subset(data.model.sec,period=='Day'),ordered=c("severity","second_collision"))
summary(fit.day,fit.measure=T)
modindices(fit.day)
model.day<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
'
fit.day<-sem(model.day,data=subset(data.model.sec,period=='Day'),ordered=c("severity","second_collision"))
summary(fit.day,fit.measure=T)
model.test<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
'
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period')
summary(fit.test,fit.measure=T)
modindices(fit.test)
model.test<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+mc_inv+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
'
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period')
summary(fit.test,fit.measure=T)
model.day<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+mc_inv+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
'
fit.day<-sem(model.day,data=subset(data.model.sec,period=='Day'),ordered=c("severity","second_collision"))
summary(fit.day,fit.measure=T)
model.day<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
'
fit.day<-sem(model.day,data=subset(data.model.sec,period=='Day'),ordered=c("severity","second_collision"))
summary(fit.day,fit.measure=T)
###SEM test: secondary collision final
model.test<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
'
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period')
summary(fit.test,fit.measure=T)
###SEM test: secondary collision final
model.test<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
second_collision~*~second_collision
'
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period')
summary(fit.test,fit.measure=T)
semPaths(fit.test, layout="tree") #create a path diagram
modindices(fit.test)
model.test<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
'
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period')
summary(fit.test,fit.measure=T)
summary(fit.test,fit.measure=T)
model.test<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
second_collision~*~second_collision
'
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period')
summary(fit.test,fit.measure=T)
modindices(fit.test)
model.test<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
second_collision~~second_collision
'
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period')
summary(fit.test,fit.measure=T)
model.day<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
'
fit.day<-sem(model.day,data=subset(data.model.sec,period=='Day'),ordered=c("severity","second_collision"))
summary(fit.day,fit.measure=T)
modindices(fit.day)
model.night<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
'
fit.night<-sem(model.night,data=subset(data.model.sec,period=='Night'),ordered=c("severity","second_collision"))
summary(fit.night,fit.measure=T)
modindices(fit.night)
summary(fit.day,fit.measure=T)
summary(fit.night,fit.measure=T)
summary(fit.test,fit.measure=T)
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period',group.equal='regressions')
summary(fit.test,fit.measure=T)
modindices(fit.test)
summary(fit.test,fit.measure=T)
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"))
summary(fit.test,fit.measure=T)
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period',group.equal='regressions')
summary(fit.test,fit.measure=T)
modindices(fit.test)
###SEM test: secondary collision final
model.test<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain+phone
'
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period',group.equal='regressions')
summary(fit.test,fit.measure=T)
##SEM test: secondary collision final
model.test<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
'
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period',group.equal='regressions')
summary(fit.test,fit.measure=T)
save.image("SEM.RData")
save.image("Backup.RData")
table(data.model.sec)
table(data.model.sec$period)
table(data.model.sec$severity)
rm(fit.test1,fit.test2)
table(data.model.sec$second_collision)
3245/39904
library(plotrix)
pie(c(0.4,0.6),labels=lbls,col=rainbow(length(lbls)),cex=1.2,main=paste('Event Count by Types','\n','(Oct 1 2012-Jan 31 2013)'))
pie(c(0.4,0.6),labels=c("a","b"),col=rainbow(length(lbls)),cex=1.2,main=paste('Event Count by Types','\n','(Oct 1 2012-Jan 31 2013)'))
pie(c(0.4,0.6),labels=c("a","b"),col=rainbow(length(lbls)),cex=1.2,main=paste('Event Count by Types','\n','(Oct 1 2012-Jan 31 2013)'))
pie(c(0.4,0.6),labels=c("a","b"),col=rainbow(2),cex=1.2,main=paste('Event Count by Types','\n','(Oct 1 2012-Jan 31 2013)'))
pie(c(0.4,0.6),labels=c("a","b"),col=c(1,2),cex=1.2,main=paste('Event Count by Types','\n','(Oct 1 2012-Jan 31 2013)'))
pie(c(0.4,0.6),labels=c("a","b"),col=c(2,3),cex=1.2,main=paste('Event Count by Types','\n','(Oct 1 2012-Jan 31 2013)'))
pie(c(0.4,0.6),labels=c("a","b"),col=c(2,3),cex=1.2)
table(data.model.sec$risk,data.model.sec$second_collision)
1987/(15889+22028+1987)
302/(941+2002+302)
pie(c(0.050,0.95),labels=c("a","b"),col=c(2,3),cex=1.2)
pie(c(0.050,0.95),labels=c("Serious Accidents 5.0%","Minor Accidents 95.0%"),col=c(2,3),cex=1.2)
pie(c(0.050,0.95),labels=c("Serious Accidents \n 5.0%","Minor Accidents 95.0%"),col=c(2,3),cex=1.2)
pie(c(0.050,0.95),labels=c("Serious Accidents \n 5.0%","Minor Accidents \n 95.0%"),col=c(2,3),cex=1.2)
pie(c(0.050,0.95),labels=c("Serious \n Accidents \n 5.0%","Minor \n Accidents \n 95.0%"),col=c(2,3),cex=1.2)
pie(c(0.050,0.95),labels=c("Serious \n Accidents \n 5.0%","Minor \n Accidents \n 95.0%"),col=c(2,4),cex=1.2)
pie(c(0.050,0.95),labels=c("Serious \n Accidents \n 5.0%","Minor \n Accidents \n 95.0%"),col=c(2,5),cex=1.2)
pie(c(0.050,0.95),labels=c("Serious \n Accidents \n 5.0%","Minor \n Accidents \n 95.0%"),col=c(2,6),cex=1.2)
pie(c(0.050,0.95),labels=c("Serious \n Accidents \n 5.0%","Minor \n Accidents \n 95.0%"),col=c(2,3),cex=1.2)
pie(c(0.093,0.907),labels=c("Serious \n Accidents \n 5.0%","Minor \n Accidents \n 95.0%"),col=c(2,3),cex=1.2)
pie(c(0.093,0.907),labels=c("Serious \n Accidents \n 9.3%","Minor \n Accidents \n 90.7%"),col=c(2,3),cex=1.2)
png(file="Severity_others.png",width=8,height=7,units='in',res=300,family="Times New Roman")
pie(c(0.050,0.95),labels=c("Serious \n Accidents \n 5.0%","Minor \n Accidents \n 95.0%"),col=c(2,3),cex=1.2)
dev.off()
png(file="Severity_secondcollision.png",width=8,height=7,units='in',res=300,family="Times New Roman")
pie(c(0.093,0.907),labels=c("Serious \n Accidents \n 9.3%","Minor \n Accidents \n 90.7%"),col=c(2,3),cex=1.2)
dev.off()
library(extrafont)
loadfonts(device = "win")
png(file="Severity_others.png",width=8,height=7,units='in',res=300,family="Times New Roman")
pie(c(0.050,0.95),labels=c("Serious \n Accidents \n 5.0%","Minor \n Accidents \n 95.0%"),col=c(2,3),cex=1.2)
dev.off()
png(file="Severity_secondcollision.png",width=8,height=7,units='in',res=300,family="Times New Roman")
pie(c(0.093,0.907),labels=c("Serious \n Accidents \n 9.3%","Minor \n Accidents \n 90.7%"),col=c(2,3),cex=1.2)
dev.off()
png(file="Severity_others.png",width=8,height=7,units='in',res=300,family="Times New Roman")
pie(c(0.050,0.95),labels=c("Serious \n Accidents \n 5.0%","Minor \n Accidents \n 95.0%"),col=c(2,3),cex=1.7)
dev.off()
png(file="Severity_secondcollision.png",width=8,height=7,units='in',res=300,family="Times New Roman")
pie(c(0.093,0.907),labels=c("Serious \n Accidents \n 9.3%","Minor \n Accidents \n 90.7%"),col=c(2,3),cex=1.7)
dev.off()
table(data.model.sec$severity)
table(data.model.sec$severity)/43149
28907/43149
summary(fit.test,fit.measure=T)
semPaths(fit.test, layout="tree") #create a path diagram
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
'
fit.compare<-sem(model.compare,data=data.model.sec,ordered=c("severity"),group='period',group.equal='regressions')
model.compare<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
'
fit.compare<-sem(model.compare,data=data.model.sec,ordered=c("severity"),group='period',group.equal='regressions')
summary(fit.compare,fit.measure=T)
semPaths(fit.test, layout="tree") #create a path diagram
semPaths(fit.compare, layout="tree") #create a path diagram
semPaths(fit.compare) #create a path diagram
?sempaths
?semPaths
semPaths(fit.compare,curvePivot=T,whatLabels = 'est') #create a path diagram
semPaths(fit.test, layout="tree") #create a path diagram
semPaths(fit.SEM2, layout="tree2") #create a path diagram
semPaths(fit.SEM2, layout="circle") #create a path diagram
semPaths(fit.night, layout="tree") #create a path diagram
semPaths(fit.night, layout="circle") #create a path diagram
semPaths(fit.night, layout="tree2") #create a path diagram
semPaths(fit.night, layout="spring") #create a path diagram
semPaths(fit.night, layout="circle2") #create a path diagram
semPaths(fit.night, layout="tree") #create a path diagram
semPaths(fit.night, layout="tree",,nodeLabels=c("1","2")) #create a path diagram
?semPaths
semPaths(fit.night, layout="tree",,nodeLabels=c(second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement)) #create a path diagram
semPaths(fit.night, layout="tree") #create a path diagram
semPaths(fit.night, layout="tree",nodeLabels = c("mc_inv","ped_inv","bike_inv","intersection","alcohol","inattention","drugs","yield","illness","controldisre","speeding","fatigue","phone","braking","pavement","inexperience","sleep","view","rain","severity","sec_collision")) #create a path diagram
lbs=c("mc_inv","ped_inv","bike_inv","intersection","alcohol","inattention","drugs","yield","illness","controldisre","speeding","fatigue","phone","braking","pavement","inexperience","sleep","view","rain","severity","sec_collision")
lbs
semPaths(fit.night, layout="tree",nodeLabels = lbs) #create a path diagram
semPaths(fit.night, layout="tree") #create a path diagram
lbs
lbs=c(1:21)
lbs
semPaths(fit.night, layout="tree",nodeLabels = lbs) #create a path diagram
lbs=c(1:22)
semPaths(fit.night, layout="tree",nodeLabels = lbs) #create a path diagram
lbs=c(1:23)
semPaths(fit.night, layout="tree",nodeLabels = lbs) #create a path diagram
semPaths(fit.night, layout="tree") #create a path diagram
semPaths(fit.night) #create a path diagram
semPaths(fit.night, layout="tree",nodeLabels = lbs) #create a path diagram
lbs=c("severity","sec_collision","mc_inv","ped_inv","bike_inv","intersection","alcohol","inattention","drugs","yield","illness","controldisre","speeding","fatigue","phone","braking","pavement","inexperience","sleep","view","rain","1","1")
semPaths(fit.night, layout="tree",nodeLabels = lbs) #create a path diagram
semPaths(fit.night, layout="circle",nodeLabels = lbs) #create a path diagram
semPaths(fit.night, layout="circle",nodeLabels = lbs,sizeMan=8) #create a path diagram
semPaths(fit.night, layout="circle",nodeLabels = lbs,sizeMan=8,nCharNodes=0) #create a path diagram
semPaths(fit.night, layout="circle",nodeLabels = lbs,sizeMan=8,nCharNodes=0,residuals=FALSE) #create a path diagram
semPaths(fit.night, layout="circle",nodeLabels = lbs,sizeMan=8,nCharNodes=0,residuals=T) #create a path diagram
lbs=c(1:23)
semPaths(fit.night, layout="circle",nodeLabels = lbs,sizeMan=8,nCharNodes=0) #create a path diagram
semPaths(fit.night, layout="tree2",nodeLabels = lbs,sizeMan=8,nCharNodes=0) #create a path diagram
semPaths(fit.night, layout="tree2",nodeLabels = lbs,nCharNodes=0) #create a path diagram
semPaths(fit.test, layout="tree") #create a path diagram
semPaths(fit.day, layout="tree") #create a path diagram
png(file="path diagram.png",width=16,height=8,units='in',res=300,family="Times New Roman")
semPaths(fit.day, layout="tree") #create a path diagram
dev.off()
png(file="path diagram.png",width=16,height=8,units='in',res=300,family="Times New Roman")
lbs=c("severity","sec_collision","mc_inv","ped_inv","bike_inv","intersection","alcohol","inattention","drugs","yield","illness","controldisre","speeding","fatigue","phone","braking","pavement","inexperience","sleep","view","rain","1","1")
semPaths(fit.day, layout="tree",nodeLabels = lbs) #create a path diagram
dev.off()
png(file="path diagram.png",width=24,height=8,units='in',res=300,family="Times New Roman")
lbs=c("severity","sec_collision","mc_inv","ped_inv","bike_inv","intersection","alcohol","inattention","drugs","yield","illness","controldisre","speeding","fatigue","phone","braking","pavement","inexperience","sleep","view","rain","1","1")
semPaths(fit.day, layout="tree",nodeLabels = lbs) #create a path diagram
dev.off()
png(file="path diagram.png",width=24,height=8,units='in',res=300,family="Times New Roman")
lbs=c("severity","sec_collision","mc_inv","ped_inv","bike_inv","intersection","alcohol","inattention","drugs","yield","illness","controldisre","speeding","fatigue","phone","braking","pavement","inexperience","sleep","view","rain","1","1")
semPaths(fit.day, layout="circle",nodeLabels = lbs) #create a path diagram
dev.off()
png(file="path diagram.png",width=24,height=8,units='in',res=300,family="Times New Roman")
lbs=c("severity","sec_collision","mc_inv","ped_inv","bike_inv","intersection","alcohol","inattention","drugs","yield","illness","controldisre","speeding","fatigue","phone","braking","pavement","inexperience","sleep","view","rain","1","1")
semPaths(fit.day, layout="tree2",nodeLabels = lbs) #create a path diagram
dev.off()
png(file="path diagram.png",width=24,height=8,units='in',res=300,family="Times New Roman")
lbs=c("severity","sec_collision","mc_inv","ped_inv","bike_inv","intersection","alcohol","inattention","drugs","yield","illness","controldisre","speeding","fatigue","phone","braking","pavement","inexperience","sleep","view","rain","1","1")
semPaths(fit.day, layout="tree2",nodeLabels = lbs,label.cex = 0.5) #create a path diagram
dev.off()
png(file="path diagram.png",width=24,height=8,units='in',res=300,family="Times New Roman")
lbs=c("severity","sec_collision","mc_inv","ped_inv","bike_inv","intersection","alcohol","inattention","drugs","yield","illness","controldisre","speeding","fatigue","phone","braking","pavement","inexperience","sleep","view","rain","1","1")
semPaths(fit.day, layout="tree",nodeLabels = lbs,label.cex = 0.5) #create a path diagram
dev.off()
png(file="path diagram.png",width=24,height=8,units='in',res=300,family="Times New Roman")
lbs=c("severity","sec_collision","mc_inv","ped_inv","bike_inv","intersection","alcohol","inattention","drugs","yield","illness","controldisre","speeding","fatigue","phone","braking","pavement","inexperience","sleep","view","rain","1","1")
semPaths(fit.day, layout="tree") #create a path diagram
dev.off()
png(file="path diagram.png",width=16,height=8,units='in',res=300,family="Times New Roman")
lbs=c("severity","sec_collision","mc_inv","ped_inv","bike_inv","intersection","alcohol","inattention","drugs","yield","illness","controldisre","speeding","fatigue","phone","braking","pavement","inexperience","sleep","view","rain","1","1")
semPaths(fit.day, layout="tree") #create a path diagram
dev.off()
semPaths(fit.compare,curvePivot=T,whatLabels = 'est') #create a path diagram
semPaths(fit.test, layout="tree") #create a path diagram
summary(fit.test,fit.measure=T)
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period',group.equal='thresholds')
summary(fit.test,fit.measure=T)
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period')
summary(fit.test,fit.measure=T)
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period',group.equal = "regressions")
summary(fit.test,fit.measure=T)
?pie
pie(c(0.050,0.95),labels=c("Serious \n Accidents \n 5.0%","Minor \n Accidents \n 95.0%"),col=c(2,3),cex=1.7,font=2)
png(file="Severity_singlecollision.png",width=8,height=7,units='in',res=300,family="Times New Roman")
pie(c(0.050,0.95),labels=c("Serious \n Accidents \n 5.0%","Minor \n Accidents \n 95.0%"),col=c(2,3),cex=2,font=2)
dev.off()
png(file="Severity_secondcollision.png",width=8,height=7,units='in',res=300,family="Times New Roman")
pie(c(0.093,0.907),labels=c("Serious \n Accidents \n 9.3%","Minor \n Accidents \n 90.7%"),col=c(2,3),cex=2,font=2)
dev.off()
save.image("SEM.RData")
save.image("Backup.RData")
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period')
summary(fit.test,fit.measure=T)
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period',group.equal = "regressions")
summary(fit.test,fit.measure=T)
model.day<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
'
fit.day<-sem(model.day,data=subset(data.model.sec,period=='Day'),ordered=c("severity","second_collision"))
summary(fit.day,fit.measure=T)
model.night<-
'
severity ~ second_collision+mc_inv+ped_inv+bike_inv+intersection+alcohol+inattention+drugs+yield+illness+controldisre+speeding+fatigue+phone+braking+pavement
severity | t1+t2+t3+t4
second_collision~alcohol+inattention+ped_inv+inexperience+drugs+sleep+braking+controldisre+fatigue+speeding+pavement+view+rain
'
fit.night<-sem(model.night,data=subset(data.model.sec,period=='Night'),ordered=c("severity","second_collision"))
summary(fit.night,fit.measure=T)
summary(fit.day,fit.measure=T)
summary(fit.night,fit.measure=T)
fit.test<-sem(model.test,data=data.model.sec,ordered=c("severity","second_collision"),group='period')
summary(fit.test,fit.measure=T)
load("C:/Users/Kevin/Dropbox/Paper Preparation/taxi_project/R/modeling.RData")
setwd("C:\\Users\\Kevin\\Dropbox\\Paper Preparation\\taxi_project\\R")
library("sp")
library("maptools")
library(CARBayes)
library(spdep)
summary(hier.pick$mcmc)
summary(hier.pick$mcmc)
names(data.model)
table(data.model$NTA)
hier.pick <- MCMChregress(fixed=logpick~busCount+subwayCount+bikeCount+roadDensity+medincome+employ+as.factor(monthofyear), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=2000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
library(MCMCpack)
install.packages(MCMCpack)
install.packages("MCMCpack")
library(MCMCpack)
hier.pick <- MCMChregress(fixed=logpick~busCount+subwayCount+bikeCount+roadDensity+medincome+employ+as.factor(monthofyear), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=2000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
hier.drop <- MCMChregress(fixed=logdrop~busCount+subwayCount+bikeCount+roadDensity+medincome+employ+population+as.factor(monthofyear), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=2000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
summary(hier.pick$mcmc)
plotState(HMMRE.pick)
HMMRE.pick
summary(HMMRE.pick)
hier.pick <- MCMChregress(fixed=logpick~busCount+subwayCount+bikeCount+roadDensity+medincome+employ+as.factor(month), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=2000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
data.model.full$group<-paste(data.model.full$NTA,as.character(data.model.full$month)
data.model.full$group<-paste(data.model.full$NTA,as.character(data.model.full$month),sep='-')
data.model.full$group
hier.pick <- MCMChregress(fixed=logpick~busCount+subwayCount+bikeCount+roadDensity+medincome+employ, random=~1, group="group",
data=data.model.full, burnin=10000, mcmc=2000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
data.model.full$month
hier.pick <- MCMChregress(fixed=logpick~busCount+subwayCount+bikeCount+roadDensity+medincome+employ+as.factor(month), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=2000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
summary(hier.pick$mcmc)
hier.drop <- MCMChregress(fixed=logdrop~busCount+subwayCount+bikeCount+roadDensity+medincome+employ+population+as.factor(month), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=2000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
summary(hier.drop$mcmc)
summary(hier.pick$mcmc)
data.model.full$medincome1000<-data.model.full$medincome/1000
data.model.full$medincome1000<-data.model.full$medincome/1000
data.model.full$population1000<-data.model.full$population/1000
names(data.model.full)
hier.pick2 <- MCMChregress(fixed=logpick~busCount+subwayCount+bikeCount+roadDensity+medincome1000+employ+as.factor(monthofyear), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=2000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
summary(hier.pick2$mcmc)
pick.hier<-hglm(fixed=log(pick+1)~busCount+subwayCount+bikeCount+roadDensity+population+medincome+employ+monthofyear,random=~1|NTA,family=gaussian(link=identity), data=data.model.full)
library(hglm)
pick.hier<-hglm(fixed=log(pick+1)~busCount+subwayCount+bikeCount+roadDensity+population+medincome+employ+monthofyear,random=~1|NTA,family=gaussian(link=identity), data=data.model.full)
print(summary(pick.hier), print.ranef=F)
pick.hier<-hglm(fixed=log(pick+1)~busCount+subwayCount+bikeCount+roadDensity+population+medincome+employ+as.factor(monthofyear),random=~1|NTA,family=gaussian(link=identity), data=data.model.full)
print(summary(pick.hier), print.ranef=F)
drop.hier<-hglm(fixed=log(drop+1)~busCount+subwayCount+bikeCount+roadDensity+population+medincome+employ+as.factor(monthofyear),random=~1|NTA,family=gaussian(link=identity), data=data.model.full)
print(summary(drop.hier), print.ranef=F)
pick.hier<-hglm(fixed=log(pick+1)~busCount+subwayCount+bikeCount+roadDensity+population+medincome+employ+as.factor(monthofyear),random=~1|NTA,family=gaussian(link=identity), data=data.model)
print(summary(pick.hier), print.ranef=F)
pick.hier<-hglm(fixed=log(pick+1)~busCount+subwayCount+bikeCount+roadDensity+population+medincome+employ+as.factor(monthofyear),random=~1|NTA,family=gaussian(link=identity), data=data.model.full)
print(summary(pick.hier), print.ranef=F)
drop.hier<-hglm(fixed=log(drop+1)~busCount+subwayCount+bikeCount+roadDensity+population+medincome+employ+as.factor(monthofyear),random=~1|NTA,family=gaussian(link=identity), data=data.model.full)
print(summary(drop.hier), print.ranef=F)
pick.hier<-hglm(fixed=log(pick+1)~busCount+subwayCount+bikeCount+roadDensity+population+medincome+employ+as.factor(monthofyear),random=~1|NTA,family=gaussian(link=identity), data=data.model.full)
print(summary(pick.hier), print.ranef=F)
pick.hier<-hglm(fixed=log(pick+1)~busCount+subwayCount+bikeCount+roadDensity+employ+as.factor(monthofyear),random=~1|NTA,family=gaussian(link=identity), data=data.model.full)
print(summary(pick.hier), print.ranef=F)
summary(hier.drop2$mcmc)
summary(hier.drop$mcmc)
drop.hier<-hglm(fixed=log(drop+1)~busCount+subwayCount+bikeCount+roadDensity+population+medincome+employ+as.factor(month),random=~1|NTA,family=gaussian(link=identity), data=data.model.full)
print(summary(drop.hier), print.ranef=F)
summary(hier.pick2$mcmc)
hier.drop2 <- MCMChregress(fixed=logdrop~busCount+subwayCount+bikeCount+roadDensity+medincome1000+employ+population1000+as.factor(monthofyear), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=2000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
summary(hier.drop2$mcmc)
summary(hier.drop2$mcmc)
summary(hier.drop2$mcmc)
save.image("modeling.RData")
drop.hier<-hglm(fixed=log(drop+1)~busCount+subwayCount+bikeCount+roadDensity+population+medincome+employ+as.factor(month),random=~1|NTA,family=gaussian(link=identity), data=data.model.full)
print(summary(drop.hier), print.ranef=F)
pick.hier<-hglm(fixed=log(pick+1)~busCount+subwayCount+bikeCount+roadDensity+employ+as.factor(month),random=~1|NTA,family=gaussian(link=identity), data=data.model.full)
print(summary(pick.hier), print.ranef=F)
#test1
hier.pick <- MCMChregress(fixed=logpick~busCount+subwayCount+bikeCount+roadDensity+employ+as.factor(month), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=30000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
summary(hier.pick$mcmc)
hier.drop <- MCMChregress(fixed=logdrop~busCount+subwayCount+bikeCount+roadDensity+medincome1000+employ+population1000+as.factor(month), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=30000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
summary(hier.drop$mcmc)
#test2
data.model.full$medincome1000<-data.model.full$medincome/1000
data.model.full$population1000<-data.model.full$population/1000
hier.pick2 <- MCMChregress(fixed=logpick~busCount+subwayCount+bikeCount+roadDensity+employ+as.factor(monthofyear), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=30000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
summary(hier.pick2$mcmc)
hier.drop2 <- MCMChregress(fixed=logdrop~busCount+subwayCount+bikeCount+roadDensity+medincome1000+employ+population1000+as.factor(monthofyear), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=30000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
summary(hier.drop2$mcmc)
summary(hier.drop2$mcmc)
summary(hier.pick2$mcmc)
save.image("modeling.RData")
data.model.full$employ1000<-data.model.full$employ/1000
#test2
data.model.full$medincome1000<-data.model.full$medincome/1000
data.model.full$population1000<-data.model.full$population/1000
data.model.full$employ1000<-data.model.full$employ/1000
hier.pick2 <- MCMChregress(fixed=logpick~busCount+subwayCount+bikeCount+roadDensity+employ1000+as.factor(monthofyear), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=30000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
summary(hier.pick2$mcmc)
hier.drop2 <- MCMChregress(fixed=logdrop~busCount+subwayCount+bikeCount+roadDensity+medincome1000+employ1000+population1000+as.factor(monthofyear), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=30000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
summary(hier.drop2$mcmc)
summary(hier.pick2$mcmc)
save.image("modeling.RData")
setwd("C:\\Users\\Kevin\\Dropbox\\Paper Preparation\\taxi_project\\Modeling")
data.model.full<-read.csv("data_model_full.csv")
library(MCMCpack)
rm(list=ls())
data.model.full<-read.csv("data_model_full.csv")
###hierarchical gaussian
library(MCMCpack)
data.model.full$medincome1000<-data.model.full$medincome/1000
data.model.full$population1000<-data.model.full$population/1000
data.model.full$employ1000<-data.model.full$employ/1000
hier.pick <- MCMChregress(fixed=logpick~busCount+subwayCount+bikeCount+roadDensity+employ1000+as.factor(monthofyear), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=30000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
hier.drop <- MCMChregress(fixed=logdrop~busCount+subwayCount+bikeCount+roadDensity+medincome1000+employ1000+population1000+as.factor(monthofyear), random=~1, group="NTA",
data=data.model.full, burnin=10000, mcmc=30000, thin=1,verbose=1,
seed=NA, beta.start=0, sigma2.start=1,
Vb.start=1, mubeta=0, Vbeta=1.0E6,
r=3, R=diag(c(1)), nu=0.001, delta=0.001)
